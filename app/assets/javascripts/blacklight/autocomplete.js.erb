/*global Bloodhound */

// See docs at https://github.com/twitter/typeahead.js

BlacklightAutoComplete = function () {

    var autocomplete_config =
    <%= CatalogController.blacklight_config.autocomplete.to_json %>
    var blacklight_autocomplete = function () {
        var $el = $(this);
        var suggestUrl = $el.data('autocomplete-path');
        var autocomplete_config_key = $el.data('autocomplete-config');

        var minimumCharacters = 2; // default

        var terms
        if (autocomplete_config[autocomplete_config_key]) {
            terms = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: suggestUrl + '?autocomplete_config=' + autocomplete_config_key + '&q=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            minimumCharacters = 2;
        } else {
            // Just use somethign that won't do anything
            terms = new Bloodhound({
                local: [],
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
            });
            minimumCharacters = 1000 // never do it

        }

        terms.initialize(true); // true means "reinitialize every time" ???

        $el.typeahead('destroy');

        $el.typeahead({
                hint: true,
                highlight: true,
                minLength: minimumCharacters
            },
            {
                name: 'terms',
                displayKey: 'term',
                source: terms.ttAdapter(),
                limit: 15
            }).on('typeahead:selected',
            function (event, data) {
                $(event.target).closest('form').submit();
            });
    };

    var blacklight_set_autocomplete = function (i, rawel) {
        var el = $(rawel);
        var controller_id = el.data('autocomplete-controller');
        if (controller_id) {
            var controller = $('#' + controller_id);
            el.data('autocomplete-config', controller.val());
            controller.change(
                function () {
                    var me = $(this);
                    var search_type = me.val();
                    if (autocomplete_config[search_type] == null) {
                        el.data('autocomplete-enabled', false);
                        el.autocomplete = 'off'
                        el.data('autocomplete-config', 'disabled');
                    } else {
                        el.data('autocomplete-enabled', true);
                        el.data('autocomplete-config', search_type);
                        el.autocomplete = 'on';
                    }
                    $.each([el], blacklight_autocomplete);
                });
        }
        el.trigger('change')
    };

    var setup_controller = function (i, rawel) {
        var el = $(rawel);
        var controller_id = el.data('autocomplete-controller');
        if (controller_id) {
            var controller = $('#' + controller_id);
            controller.change();
        }
    };

    return {
        set_autocomplete: blacklight_set_autocomplete,
        autocomplete: blacklight_autocomplete,
        setup_controller: setup_controller
    }

}();


Blacklight.onLoad(function () {
    'use strict';
    // Set up the connection between the controllers and the inputs
    $('[data-autocomplete-enabled="true"]').each(BlacklightAutoComplete.set_autocomplete);

    // Add the autocomplete to the inputs
    $('[data-autocomplete-enabled="true"]').each(BlacklightAutoComplete.autocomplete);

    // Inititalize with the current value of the controller.
    $('[data-autocomplete-enabled="true"]').each(BlacklightAutoComplete.setup_controller);

});

